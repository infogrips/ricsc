!=====================================================================================
!                                                                            
! DocBook => Format X Converter
!
! Description
!                                                                            
! Generate HTML, HTMLHELP and PDF formats from DocBook xml input. The 
! xml input must be organzied in the infoGrips DocBook directory structure.
!
! Usage
!
! First create a DocBook project directory ie. \entw\project\docbook\ics\igscript.
! Open a command window and change to the created directory. Make subdirectories
! for any desired format (ie. html, htmlhelp and/or pdf). Start the converter
! with mdoc from the command line. The conversion results will be autmatically 
! copied to f:\entw\produkt\iltools\system\doc and www.infogrips.ch/doc.
!
! Supported Parameters
!
! -format <format>
!  Generates only the given <format>, ie. HTML. Without the -format parameter
!  all supported output formats will be generated.
!
! -noinclude
!  Supresses xinclude processing with xmllint.
!
! -nofo
!  Use last fo output.
!
! -debug
!  Show all log messages.
!
! -distribute
!  web: distribute to webserver only
!  product: distribute to product directory only
!  web,product: distribute to webserver and product directory
!
! -document
!  Name of main document (without .xml), only if more than
!  one version of the same document exists.
!
! Revision History
!
! 2005.03.14/mg created.
! 2005.03.18/mg java VM is now started with 256 MByte for large documents (> 200 pages).
!                                                                            
!=====================================================================================

MAP FORMATS
END_MAP

!-------------------------------------------------------------------------------------------------------------

PROCEDURE DISTRIBUTE
   IF OPT.distribute SWAP LOC IS_NOT_NULL THEN
      POP TRUE
   ELSE
      POP FALSE
   END_IF
END_PROCEDURE

!-------------------------------------------------------------------------------------------------------------

PROCEDURE GET_PARAMS
   GET_WORKING_DIRECTORY TO_LOWER => VAR.DIRECTORY
   VAR.DIRECTORY '\' LOCR INC EXTRLN POP => VAR.DOCDIR
	IF 'OPT.document' EXISTS THEN
	   OPT.document => VAR.DOCUMENT
	ELSE
      VAR.DOCDIR => VAR.DOCUMENT
   END_IF
   VAR.DIRECTORY '\' LOCR EXTRLN1 '\' LOCR INC EXTRLN POP => VAR.DOCCLASS
   
   IF 'OPT.base_directory' EXISTS NOT THEN
      DISPLAY 'OPT.base_directory not set'
	  HALT
   END_IF
   
   OPT.base_directory . '..\source' => VAR.SOURCEROOT
   OPT.base_directory . '..\' . VAR.DOCDIR => VAR.PRODUCTDOC
   '' => VAR.WEBDIR
   
   VAR.SOURCEROOT . '\' . VAR.DOCCLASS . '\' . VAR.DOCDIR => VAR.SOURCEDIR
   VAR.SOURCEDIR . '\temp\' . VAR.DOCUMENT . '.xml' => VAR.XINCLUDE
   VAR.SOURCEDIR . '\temp\' . VAR.DOCUMENT . '.fo' => VAR.FO
   'g:\programme' => VAR.PROGRAMDIR
   IF 'OPT.format' EXISTS NOT THEN
      'all' => OPT.format
   ELSIF OPT.format = '' THEN
      'all' => OPT.format
   END_IF
   IF 'OPT.distribute' EXISTS NOT THEN
      'web,product' => OPT.distribute
   END_IF
END_PROCEDURE

!-------------------------------------------------------------------------------------------------------------

PROCEDURE EXECUTE_COMMAND_SILENT ! [s command][b status]

   IF 'OPT.debug' EXISTS NOT THEN
      ' >nul 2>nul' APP
   END_IF => VAR.COMMAND
   IF 'OPT.debug' EXISTS THEN
      DISPLAY VAR.COMMAND
   END_IF
   IF VAR.COMMAND OSCALL <> 0 THEN
      FALSE
   ELSE
      TRUE
   END_IF

END_PROCEDURE

PROCEDURE EXECUTE_COMMAND ! [s command][b status]
   IF EXECUTE_COMMAND_SILENT NOT THEN
      ERROR 'unable to execute command ',VAR.COMMAND
      FALSE
   ELSE
      TRUE
   END_IF
END_PROCEDURE

PROCEDURE EXECUTE_JAVA ! [s jar][b status]
   IF DUP '-classpath ' STARTS_WITH THEN
      'java -Xms256m -Xmx512m ' SWAP APP EXECUTE_COMMAND
   ELSE
      'java -Xms256m -Xmx512m -jar ' SWAP APP EXECUTE_COMMAND
   END_IF
END_PROCEDURE

!-------------------------------------------------------------------------------------------------------------

PROCEDURE PROCESS_XINCLUDE
   IF 'OPT.noinclude' EXISTS THEN
      RETURN
   END_IF
   DISPLAY 'resolving xincludes for ',VAR.DOCUMENT,'.xml ...'
   VAR.PROGRAMDIR . '\xml\tools\xmllint --xinclude' .
      ' -o ' . VAR.XINCLUDE . 
      ' ' . VAR.SOURCEDIR . '\xml\' . VAR.DOCUMENT . '.xml'
   IF EXECUTE_COMMAND NOT THEN
      HALT
   END_IF
   DISPLAY 'done.'
END_PROCEDURE

!-------------------------------------------------------------------------------------------------------------

PROCEDURE GENERATE_HTML

   ! delete old files
   'del /q html\*.html' EXECUTE_COMMAND POP
   'del /q ' . VAR.WEBDIR . '\*.html' EXECUTE_COMMAND POP

   ! run saxon
   VAR.PROGRAMDIR . '\xml\xep\lib\saxon.jar ' . VAR.XINCLUDE . ' ' . VAR.SOURCEROOT . '\common\xsl\html\chunk.xsl'
   IF EXECUTE_JAVA NOT THEN
      ERROR 'unable to create HTML output'
      HALT
   END_IF

END_PROCEDURE

PROCEDURE GENERATE_HTMLHELP

   ! delete old files
   'del /q htmlhelp\*.html' EXECUTE_COMMAND POP
   'del /q htmlhelp.*' EXECUTE_COMMAND POP

   ! copy .css file
   'copy ' . VAR.SOURCEROOT . '\common\css\htmlhelp\*.css htmlhelp'
   IF EXECUTE_COMMAND NOT THEN
      ERROR 'unable to copy css file to directory htmlhelp'
      HALT
   END_IF
   ! copy images
   'copy ' . VAR.SOURCEDIR . '\images' . ' images'
   IF EXECUTE_COMMAND NOT THEN
      ERROR 'unable to copy images to directory images'
      HALT
   END_IF
   ! copy images
   'copy ' . VAR.SOURCEDIR . '\images' . ' htmlhelp\images'
   IF EXECUTE_COMMAND NOT THEN
      ERROR 'unable to copy images to directory images'
      HALT
   END_IF

   ! run saxon
   VAR.PROGRAMDIR . '\xml\xep\lib\saxon.jar ' . VAR.XINCLUDE . ' ' . VAR.SOURCEROOT . '\common\xsl\htmlhelp\htmlhelp.xsl'
   IF EXECUTE_JAVA NOT THEN
      ERROR 'unable to create HTML output'
      HALT
   END_IF

   ! run htmlhelp compiler
   VAR.PROGRAMDIR . '\htmlhelp\hhc htmlhelp.hhp'
   EXECUTE_COMMAND_SILENT POP ! html does not deliver status 0 for success
   IF 'htmlhelp.chm' TEXTFILE.EXISTS NOT THEN
      ERROR 'unable to run htmlhelp compiler'
   END_IF

   IF 'product' DISTRIBUTE THEN
      'copy htmlhelp.chm ' . VAR.PRODUCTDOC . '.chm'
      IF EXECUTE_COMMAND NOT THEN
         ERROR 'unable to copy files to the infoGrips fileserver'
      END_IF
   END_IF

   ! clean up

END_PROCEDURE

PROCEDURE GENERATE_PDF
   ! delete old files
   IF 'OPT.nofo' EXISTS NOT THEN
      'del /q ' . VAR.FO EXECUTE_COMMAND POP
   END_IF
   'del /q *.pdf' EXECUTE_COMMAND POP

   IF 'OPT.nofo' EXISTS NOT THEN
      ! run saxon
      DISPLAY 'creating ',VAR.FO,' ...'
      VAR.PROGRAMDIR . '\xml\xep\lib\saxon.jar -o ' . VAR.FO . ' ' . VAR.XINCLUDE . ' ' . VAR.SOURCEROOT . '\common\xsl\fo\docbook.xsl'
      IF EXECUTE_JAVA NOT THEN
         ERROR 'unable to create FO output'
         HALT
      END_IF
   END_IF

   DISPLAY 'creating ',VAR.DOCUMENT,'.pdf ...'
   ! run xep
   '-classpath ' .
      VAR.PROGRAMDIR . '\xml\xep\lib\xep.jar;' .
      VAR.PROGRAMDIR . '\xml\xep\lib\saxon.jar;' . 
      VAR.PROGRAMDIR . '\xml\xep\lib\xt.jar' .
   ' com.renderx.xep.XSLDriver ' .
   '-DCONFIG=' . VAR.PROGRAMDIR . '\xml\xep\xep.xml ' .
   '-fo ' . VAR.FO . ' ' . 
   VAR.DOCUMENT . '.pdf' EXECUTE_JAVA POP

   IF VAR.DOCUMENT . '.pdf' TEXTFILE.EXISTS NOT THEN
      ERROR 'unable to run xep processor'
   END_IF

   IF 'product' DISTRIBUTE THEN
      'copy ' . VAR.DOCUMENT . '.pdf ' . VAR.PRODUCTDOC . '.pdf' 
      IF EXECUTE_COMMAND NOT THEN
         ERROR 'unable to copy files to the infoGrips fileserver'
      END_IF
   END_IF

END_PROCEDURE

!-------------------------------------------------------------------------------------------------------------

PROCEDURE GENERATE_FORMAT
   DISPLAY 'generating ',VAR.FORMAT,' output for ',VAR.DOCUMENT,'.xml ...'
   'GENERATE_' . VAR.FORMAT CALL
   DISPLAY 'done.'
END_PROCEDURE

!-------------------------------------------------------------------------------------------------------------

PROCEDURE GENERATE_FORMATS
   '*.' TEXTFILE.GET_FILES => VAR.FORMATS
   WHILE &VAR.FORMATS READ_NEXT DO
      DUP SWAP POP TO_UPPER => VAR.FORMAT
      IF VAR.FORMAT = 'HTML' THEN
      ELSIF VAR.FORMAT = 'HTMLHELP' THEN
      ELSIF VAR.FORMAT = 'PDF' THEN
      ELSE
         CONTINUE
      END_IF
      IF OPT.format TO_UPPER = VAR.FORMAT THEN
         GENERATE_FORMAT
      ELSIF OPT.format = 'all' THEN
         GENERATE_FORMAT
      END_IF
   END_WHILE
END_PROCEDURE

!-------------------------------------------------------------------------------------------------------------
! main program
!-------------------------------------------------------------------------------------------------------------

GET_PARAMS
PROCESS_XINCLUDE
GENERATE_FORMATS
